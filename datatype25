import java.util.Arrays;

// Abstract class with 2 abstract methods and 3 concrete methods
abstract class AbstractStatistics {
    // Abstract methods
    abstract int total(int[] arr);
    abstract double average(int[] arr);

    // Concrete methods
    double mean(int[] arr) {
        int total = total(arr);
        double average = average(arr);
        return (double) total / arr.length;
    }

    int mode(int[] arr) {
        int maxCount = 0;
        int mode = arr[0];
        for (int i = 0; i < arr.length; i++) {
            int count = 0;
            for (int j = 0; j < arr.length; j++) {
                if (arr[j] == arr[i]) {
                    count++;
                }
            }
            if (count > maxCount) {
                maxCount = count;
                mode = arr[i];
            }
        }
        return mode;
    }

    double median(int[] arr) {
        Arrays.sort(arr);
        int n = arr.length;
        if (n % 2 == 0) {
            return (double) (arr[n / 2 - 1] + arr[n / 2]) / 2;
        } else {
            return arr[n / 2];
        }
    }
}

// Concrete class extending the abstract class
class Statistics extends AbstractStatistics {
    // Implementing abstract methods
    @Override
    int total(int[] arr) {
        int sum = 0;
        for (int num : arr) {
            sum += num;
        }
        return sum;
    }

    @Override
    double average(int[] arr) {
        int sum = total(arr);
        return (double) sum / arr.length;
    }
}

public class Main {
    public static void main(String[] args) {
        // Creating object of concrete class
        Statistics stats = new Statistics();
        
        // Sample array for demonstration
        int[] numbers = {5, 2, 7, 8, 2, 4, 7, 8, 9, 1};
        
        // Calling concrete methods from abstract class
        System.out.println("Mean: " + stats.mean(numbers));
        System.out.println("Mode: " + stats.mode(numbers));
        System.out.println("Median: " + stats.median(numbers));
    }
}
